generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id            String   @id @default(cuid())
  tmdbId        Int?     @unique
  title         String
  originalTitle String?
  overview      String?
  releaseDate   DateTime?
  runtime       Int?
  genres        String[]
  posterPath    String?
  backdropPath  String?
  rating        Float?
  rottenTomatoes Int?
  streamingServices String[]
  type          MediaType @default(MOVIE)
  
  // AI-generated tags and metadata
  aiTags        String[] @default([])  // AI-generated semantic tags
  moodTags      String[] @default([])  // Emotional/atmospheric tags
  contextTags   String[] @default([])  // Viewing context tags
  complexity    Int?                   // Viewing complexity score 1-5
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  recommendations Recommendation[]
  conversations   Conversation[]

  @@map("movies")
}

model Recommendation {
  id               String   @id @default(cuid())
  movieId          String   @map("movie_id")
  recommendedBy    String   @default("user") // "jaq", username, or "user"
  status           RecommendationStatus @default(RECOMMENDED)
  jaqNotes         String?  // Original notes from Jaq
  enthusiasmLevel  Int      @default(3) // 1-5 scale
  personalNote     String?  // User's own notes
  mood             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  movie    Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model Conversation {
  id        String   @id @default(cuid())
  input     String   // What user typed
  intent    ConversationIntent
  response  String   // AI response
  movieId   String?  // If related to a specific movie
  threadId  String?  // OpenAI thread ID for conversation continuity
  userId    String?  // User identifier for multi-user support
  createdAt DateTime @default(now())

  movie     Movie?   @relation(fields: [movieId], references: [id])

  @@map("conversations")
}

enum MediaType {
  MOVIE
  TV_SHOW
  DOCUMENTARY
  SERIES
}

enum RecommendationStatus {
  RECOMMENDED
  WATCHING
  COMPLETED
  WANT_TO_WATCH
}

enum ConversationIntent {
  REQUEST_RECOMMENDATION
  SUBMIT_RECOMMENDATION
  DISCUSSION
  QUESTION
}