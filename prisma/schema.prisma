generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  recommendations Recommendation[]
  likes         Like[]
  watchStatus   WatchStatus[]
  friends       Friendship[] @relation("UserFriends")
  friendOf      Friendship[] @relation("FriendOf")
  comments      Comment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Movie {
  id            String   @id @default(cuid())
  tmdbId        Int?     @unique
  title         String
  overview      String?
  releaseDate   DateTime?
  runtime       Int?
  genres        String[]
  posterPath    String?
  backdropPath  String?
  rating        Float?
  rottenTomatoes Int?
  streamingServices String[]
  type          MediaType @default(MOVIE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  recommendations Recommendation[]
  likes         Like[]
  watchStatus   WatchStatus[]
  comments      Comment[]

  @@map("movies")
}

model Recommendation {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  movieId   String   @map("movie_id")
  content   String?
  mood      String?
  insights  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie    Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]

  @@map("recommendations")
}

model Like {
  id               String  @id @default(cuid())
  userId           String  @map("user_id")
  movieId          String? @map("movie_id")
  recommendationId String? @map("recommendation_id")
  createdAt        DateTime @default(now())

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie          Movie?          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  recommendation Recommendation? @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@unique([userId, recommendationId])
  @@map("likes")
}

model WatchStatus {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  movieId   String      @map("movie_id")
  status    WatchStatusType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@map("watch_status")
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model Comment {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  movieId          String?  @map("movie_id")
  recommendationId String?  @map("recommendation_id")
  content          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie          Movie?          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  recommendation Recommendation? @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum MediaType {
  MOVIE
  TV_SHOW
  DOCUMENTARY
  SERIES
}

enum WatchStatusType {
  WANT_TO_WATCH
  WATCHING
  COMPLETED
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
